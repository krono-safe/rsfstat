# Copyright 2022 Krono-Safe
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# automatically generated by the FlatBuffers compiler, do not modify

# namespace: rt_rsf

import flatbuffers

class Tuple(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTuple(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Tuple()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def TupleBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4B\x52\x53\x46", size_prefixed=size_prefixed)

    # Tuple
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Index of the tuple in the array containing it. Note: should be (key) but
    # the kat loader does not allow this
    # Tuple
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Always set:  the first value to be armed in the timer
    # Tuple
    def FirstValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Only set if the timer needs intermediate reload: the number of tick to be
    # rearmed
    # Tuple
    def ReloadValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Only set if the timer needs intermediate reload: the number of times
    # `reload_value` must be rearmed
    # Tuple
    def NbReload(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def TupleStart(builder): builder.StartObject(4)
def TupleAddIndex(builder, index): builder.PrependUint32Slot(0, index, 0)
def TupleAddFirstValue(builder, firstValue): builder.PrependUint64Slot(1, firstValue, 0)
def TupleAddReloadValue(builder, reloadValue): builder.PrependUint64Slot(2, reloadValue, 0)
def TupleAddNbReload(builder, nbReload): builder.PrependUint32Slot(3, nbReload, 0)
def TupleEnd(builder): return builder.EndObject()
