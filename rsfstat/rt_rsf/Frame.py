# Copyright 2022 Krono-Safe
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# automatically generated by the FlatBuffers compiler, do not modify

# namespace: rt_rsf

import flatbuffers

class Frame(object):
    __slots__ = ['_tab']

    # the following type hints were added manually
    length_qt: int
    type: int
    task: str

    @classmethod
    def GetRootAsFrame(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Frame()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def FrameBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4B\x52\x53\x46", size_prefixed=size_prefixed)

    # Frame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Index of the Frame in the interval containing it
    # Frame
    def IndexInInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # For tiny RSF only
    # Index of the RSF (including the idle frames)
    # Frame
    def IndexInRsf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Index in the table of frames of the runtime (excluding the idle frames)
    # Frame
    def IndexInFramesTable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Distance in source ticks from the current RSF Interval start TSP to the
    # start TSP of the next RSF Interval containing a frame associated to the
    # same task.
    # Frame
    def DistanceToNextTaskFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Distance in "reduced nanoseconds" (gcd of source period and quota timer
    # period) between the start of the current frame and the start of the
    # following Frame, no matter its type.
    # Frame
    def DistanceToNextFrameStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # type of the frame
    # Frame
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Task to which the frame is associated. Optional since meaningless if
    # the type of the frame isn't FrameType::EXEC.
    # Frame
    def Task(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Index of this task on the current core
    # Frame
    def TaskCoreLocalIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Index of the associated tuple in the array of quota tuples of this rsf
    # Frame
    def IndexInQuotaTimerTuples(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # True if `waitfor_date` is set
    # Frame
    def HasWaitforDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Constrain election date of this frame. The task associated to this frame
    # shall not be restored while the `wait_until` instruction on this date has
    # not returned. This date is stored in Quota Timer Ticks and is relative to
    # the start date of the Interval containing the frame.
    # Frame
    def WaitforDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # True if `releasein_date` is set
    # Frame
    def HasReleaseinDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Constrain the ending date of this frame. The task associated to this frame
    # shall not be executed after this date. This date is stored in Quota Timer
    # Ticks and is relative to the start date of the Interval containing the
    # frame.
    # Frame
    def ReleaseinDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # The frame length in quota timer ticks
    # Frame
    def LengthQt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def FrameStart(builder): builder.StartObject(14)
def FrameAddIndexInInterval(builder, indexInInterval): builder.PrependUint32Slot(0, indexInInterval, 0)
def FrameAddIndexInRsf(builder, indexInRsf): builder.PrependUint32Slot(1, indexInRsf, 0)
def FrameAddIndexInFramesTable(builder, indexInFramesTable): builder.PrependUint32Slot(2, indexInFramesTable, 0)
def FrameAddDistanceToNextTaskFrame(builder, distanceToNextTaskFrame): builder.PrependUint32Slot(3, distanceToNextTaskFrame, 0)
def FrameAddDistanceToNextFrameStart(builder, distanceToNextFrameStart): builder.PrependUint64Slot(4, distanceToNextFrameStart, 0)
def FrameAddType(builder, type): builder.PrependInt8Slot(5, type, 0)
def FrameAddTask(builder, task): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(task), 0)
def FrameAddTaskCoreLocalIndex(builder, taskCoreLocalIndex): builder.PrependUint32Slot(7, taskCoreLocalIndex, 0)
def FrameAddIndexInQuotaTimerTuples(builder, indexInQuotaTimerTuples): builder.PrependUint32Slot(8, indexInQuotaTimerTuples, 0)
def FrameAddHasWaitforDate(builder, hasWaitforDate): builder.PrependBoolSlot(9, hasWaitforDate, 0)
def FrameAddWaitforDate(builder, waitforDate): builder.PrependUint32Slot(10, waitforDate, 0)
def FrameAddHasReleaseinDate(builder, hasReleaseinDate): builder.PrependBoolSlot(11, hasReleaseinDate, 0)
def FrameAddReleaseinDate(builder, releaseinDate): builder.PrependUint32Slot(12, releaseinDate, 0)
def FrameAddLengthQt(builder, lengthQt): builder.PrependUint64Slot(13, lengthQt, 0)
def FrameEnd(builder): return builder.EndObject()
