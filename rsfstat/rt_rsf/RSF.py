# Copyright 2022 Krono-Safe
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# automatically generated by the FlatBuffers compiler, do not modify

# namespace: rt_rsf

import flatbuffers

from . import Interval
from typing import List

class RSF(object):
    __slots__ = ['_tab']

    # the following type hints were added manually
    intervals: List[Interval.Interval]
    loop_interval: int
    core: int

    @classmethod
    def GetRootAsRSF(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RSF()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def RSFBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4B\x52\x53\x46", size_prefixed=size_prefixed)

    # RSF
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The source to which belong the interval bounds of this RSF
    # RSF
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The global core id to which this RSF is associated
    # RSF
    def Core(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # The RSF is a list of intervals
    # RSF
    def Intervals(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from rt_rsf.Interval import Interval
            obj = Interval()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RSF
    def IntervalsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # For tiny RSF only
    # Index of the first frame of the loop of the RSF (including idle frames)
    # RSF
    def LoopFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Index in the RSF table of the first frame of the looping interval (excluding the idle frames)
    # RSF
    def LoopingFrameIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Tiny RSF Only
    # Total number of frames in the RSF (including idle frames)
    # RSF
    def NbFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Index of the last frame PLUS ONE (excluding the idles ones)
    # RSF
    def EndingFrameIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Index of the first interval of the RSF loop
    # RSF
    def LoopInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # The date in Source Ticks at which the whole application must be stopped
    # (matches a RSF / loop TSP)
    # RSF
    def StopDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Not empty if the scheduler is Bitimer
    # RSF
    def SourceTuples(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from rt_rsf.Tuple import Tuple
            obj = Tuple()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RSF
    def SourceTuplesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Always not empty if the core carries tasks: contains the frames length
    # RSF
    def QuotaTuples(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from rt_rsf.Tuple import Tuple
            obj = Tuple()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RSF
    def QuotaTuplesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Does the quota timer measuring the frames accept the reload
    # RSF
    def QuotaAllowIntermediateTick(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Name of the quota timer measuring the frames
    # RSF
    def QuotaTimerName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FIXME
    # RSF
    def SourceTimerName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FIXME
    # RSF
    def HasSourceTimerName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def RSFStart(builder): builder.StartObject(15)
def RSFAddSource(builder, source): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)
def RSFAddCore(builder, core): builder.PrependUint32Slot(1, core, 0)
def RSFAddIntervals(builder, intervals): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(intervals), 0)
def RSFStartIntervalsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RSFAddLoopFrame(builder, loopFrame): builder.PrependUint32Slot(3, loopFrame, 0)
def RSFAddLoopingFrameIndex(builder, loopingFrameIndex): builder.PrependUint32Slot(4, loopingFrameIndex, 0)
def RSFAddNbFrames(builder, nbFrames): builder.PrependUint32Slot(5, nbFrames, 0)
def RSFAddEndingFrameIndex(builder, endingFrameIndex): builder.PrependUint32Slot(6, endingFrameIndex, 0)
def RSFAddLoopInterval(builder, loopInterval): builder.PrependUint32Slot(7, loopInterval, 0)
def RSFAddStopDate(builder, stopDate): builder.PrependUint64Slot(8, stopDate, 0)
def RSFAddSourceTuples(builder, sourceTuples): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(sourceTuples), 0)
def RSFStartSourceTuplesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RSFAddQuotaTuples(builder, quotaTuples): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(quotaTuples), 0)
def RSFStartQuotaTuplesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RSFAddQuotaAllowIntermediateTick(builder, quotaAllowIntermediateTick): builder.PrependBoolSlot(11, quotaAllowIntermediateTick, 0)
def RSFAddQuotaTimerName(builder, quotaTimerName): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(quotaTimerName), 0)
def RSFAddSourceTimerName(builder, sourceTimerName): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(sourceTimerName), 0)
def RSFAddHasSourceTimerName(builder, hasSourceTimerName): builder.PrependBoolSlot(14, hasSourceTimerName, 0)
def RSFEnd(builder): return builder.EndObject()
